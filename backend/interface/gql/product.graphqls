type Product {
  uuid: ID!
  userUUID: String!
  name: String!
  price: String!
  stock: String!
  createdAt: String!
  updatedAt: String!
}

type GetProductByUUIDRespData {
  data: Product!
}

type CreateProductRespData {
  data: Product!
}

type UpdateProductRespData {
  data: Product!
}

type DeleteProductRespData {
  data: Product!
}

type GetProductListRespData {
  data: [Product!]!
  total: String!
  currentPage: String!
  totalPage: String!
}

input CreateProductReq {
  name: String!
  stock: String!
  price: String!
}

input UpdateProductReq {
  name: String
  stock: String
  price: String
}

input GetProductListReq {
  userUUID: String
  query: String
  queryBy: String
  page: Int
  limit: Int
  sortOrder: Int
  sortBy: String
}

type Query {
  getProductByUUID(uuid: String!): GetProductByUUIDRespData!
  getProductList(params: GetProductListReq): GetProductListRespData!
}

type Mutation {
  createProduct(payload: CreateProductReq!): CreateProductRespData!
  updateProduct(uuid: String!, payload: UpdateProductReq!): UpdateProductRespData!
  deleteProduct(uuid: String!): DeleteProductRespData!
}

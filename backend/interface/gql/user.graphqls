type Query {
  getUserByUUID(uuid: ID!): GetUserByUUIDResp
  getUserMe: GetUserByUUIDResp
  getUserList(input: GetUserListReq): GetUserListRespData
}

type Mutation {
  createUser(input: CreateUserReq!): CreateUserRespData
  updateUserMe(input: UpdateUserReq!): UpdateUserRespData
  updateUser(uuid: ID!, input: UpdateUserReq!): UpdateUserRespData
  deleteUser(uuid: ID!): DeleteUserRespData
}

type GetUserByUUIDResp {
  uuid: ID!
  createdAt: String!
  updatedAt: String!
  username: String!
  role: String!
  email: String!
}

input CreateUserReq {
  username: String!
  email: String!
  password: String!
  role: String!
}

type CreateUserRespData {
  uuid: ID!
  username: String!
  role: String!
  createdAt: String!
  updatedAt: String!
  email: String!
}

input UpdateUserReq {
  username: String
  email: String
  password: String
  role: String
}

type UpdateUserRespData {
  uuid: ID!
  username: String!
  email: String!
  role: String!
  createdAt: String!
  updatedAt: String!
}

type DeleteUserRespData {
  uuid: ID!
  username: String!
  role: String!
  email: String!
  createdAt: String!
  updatedAt: String!
}

input GetUserListReq {
  query: String
  queryBy: String = "username"
  page: Int = 1
  limit: Int = 10
  sortOrder: Int = -1
  sortBy: String = "updated_at"
}

type GetUserListRespData_User {
  uuid: ID!
  username: String!
  email: String!
  role: String!
  createdAt: String!
  updatedAt: String!
}

type GetUserListRespData {
  total: String!
  currentPage: String!
  totalPage: String!
  data: [GetUserListRespData_User!]!
}

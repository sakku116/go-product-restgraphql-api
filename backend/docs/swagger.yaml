definitions:
  dto.BaseJSONResp:
    properties:
      code:
        type: integer
      data: {}
      detail: {}
      message:
        type: string
    type: object
  dto.CheckTokenReq:
    properties:
      access_token:
        type: string
    required:
    - access_token
    type: object
  dto.CheckTokenRespData:
    properties:
      email:
        type: string
      role:
        $ref: '#/definitions/enum.UserRole'
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.CreateProductReq:
    properties:
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  dto.CreateProductRespData:
    properties:
      created_at:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  dto.CreateUserReq:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.CreateUserRespData:
    properties:
      created_at:
        type: string
      email:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.DeleteProductRespData:
    properties:
      created_at:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  dto.DeleteUserRespData:
    properties:
      created_at:
        type: string
      email:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.GetProductByUUIDRespData:
    properties:
      created_at:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  dto.GetProductListReq:
    properties:
      limit:
        default: 10
        type: integer
      page:
        default: 1
        type: integer
      query:
        type: string
      query_by:
        default: name
        enum:
        - name
        type: string
      sort_by:
        default: updated_at
        enum:
        - updated_at
        - created_at
        - name
        - price
        type: string
      sort_order:
        default: -1
        enum:
        - 1
        - -1
        type: integer
      user_uuid:
        type: string
    type: object
  dto.GetProductListRespData:
    properties:
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.ProductModel'
        type: array
      total:
        type: integer
      total_page:
        type: integer
    type: object
  dto.GetUserByUUIDResp:
    properties:
      created_at:
        type: string
      email:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.GetUserListReq:
    properties:
      limit:
        default: 10
        type: integer
      page:
        default: 1
        type: integer
      query:
        type: string
      query_by:
        default: username
        enum:
        - username
        - email
        - role
        type: string
      sort_by:
        default: updated_at
        enum:
        - updated_at
        - created_at
        - username
        - email
        - role
        type: string
      sort_order:
        default: -1
        enum:
        - 1
        - -1
        type: integer
    type: object
  dto.GetUserListRespData:
    properties:
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.UserModel'
        type: array
      total:
        type: integer
      total_page:
        type: integer
    type: object
  dto.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginRespData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.RefreshTokenReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenRespData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.RegisterUserReq:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterUserRespData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.UpdateProductReq:
    properties:
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  dto.UpdateProductRespData:
    properties:
      created_at:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  dto.UpdateUserReq:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/enum.UserRole'
        enum:
        - admin
        - user
      username:
        type: string
    type: object
  dto.UpdateUserRespData:
    properties:
      created_at:
        type: string
      email:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
  enum.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRole_User
    - UserRole_Admin
  model.ProductModel:
    properties:
      created_at:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
      user_uuid:
        type: string
      uuid:
        type: string
    type: object
  model.UserModel:
    properties:
      created_at:
        type: string
      email:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/enum.UserRole'
      updated_at:
        type: string
      username:
        type: string
      uuid:
        type: string
    type: object
info:
  contact: {}
  title: Auth Service RESTful API
paths:
  /auth/check-token:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CheckTokenReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.CheckTokenRespData'
              type: object
      tags:
      - Auth
  /auth/login:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginRespData'
              type: object
      summary: login
      tags:
      - Auth
  /auth/refresh-token:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.RefreshTokenRespData'
              type: object
      tags:
      - Auth
  /auth/register:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterUserRespData'
              type: object
      summary: register new user
      tags:
      - Auth
  /products:
    get:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.GetProductListReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetProductListRespData'
              type: object
      security:
      - BearerAuth: []
      summary: get product list
      tags:
      - Product
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.CreateProductRespData'
              type: object
      security:
      - BearerAuth: []
      summary: create new product
      tags:
      - Product
  /products/{uuid}:
    delete:
      parameters:
      - description: product uuid
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.DeleteProductRespData'
              type: object
      security:
      - BearerAuth: []
      summary: delete product
      tags:
      - Product
    get:
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetProductByUUIDRespData'
              type: object
      security:
      - BearerAuth: []
      summary: get product by uuid
      tags:
      - Product
    put:
      parameters:
      - description: product uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.UpdateProductRespData'
              type: object
      security:
      - BearerAuth: []
      summary: update product
      tags:
      - Product
  /users:
    get:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.GetUserListReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserListRespData'
              type: object
      security:
      - BearerAuth: []
      summary: get user list
      tags:
      - User
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.CreateUserRespData'
              type: object
      security:
      - BearerAuth: []
      summary: create new user (admin only)
      tags:
      - User
  /users/{uuid}:
    delete:
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.DeleteUserRespData'
              type: object
      security:
      - BearerAuth: []
      summary: delete user (admin only)
      tags:
      - User
    get:
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserByUUIDResp'
              type: object
      security:
      - BearerAuth: []
      summary: get user by uuid
      tags:
      - User
    put:
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.UpdateUserRespData'
              type: object
      security:
      - BearerAuth: []
      summary: update user (admin only)
      tags:
      - User
  /users/me:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserByUUIDResp'
              type: object
      security:
      - BearerAuth: []
      summary: get user (me)
      tags:
      - User
    put:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/dto.UpdateUserRespData'
              type: object
      security:
      - BearerAuth: []
      summary: update user (me)
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: JWT Authorization header using the Bearer scheme (add 'Bearer ' prefix).
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
